function [B1x, B1y, B1z, Pos,CoilTraj]=Coil_Sensitivity(X,Y)
% X, Y: observation points in mm
% Pos: center location of the coils in meter
% CoilTraj: the coordinates of the trajectory of the coil in meter

% N_x=length(X(1,:));
% N_y=length(Y(:,1));
r = 0.014;
% 1
% p{1}.Azimuth=0;% p{1}.CoilID=1;
% p{1}.CurrentDir=1; % Currentdir, 1: clockwise; -1: counter clockwise
% p{1}.Elevation=0;
% % position of the center of the coil, in meter
% p{1}.PosX=-0.046; % X position of the center of the coil, in meter
% p{1}.PosY=0;% Y position of the center of the coil, in meter
% p{1}.PosZ=0;% Z position of the center of the coil, in meter
% p{1}.Radius=r; % radiu of coil
% p{1}.Scale=1; % scale of the B1-fields
% p{1}.Segment=30;
% p{1}.I0 = 1;
% p{1}.phi0 = 0;

coil_parameters(1,:) = [0,1,0,-0.046,0,0,r,1,30,1,0];% p.CoilID=1
coil_parameters(2,:) = [-pi/2,1,0,0,0.046,0,r,1,30,1,0];% p.CoilID=2
coil_parameters(3,:) = [0,1,0,0.046,0,0,r,1,30,10,0];% p.CoilID=3, small change on 5th June
coil_parameters(4,:) = [-pi/2,1,0,0,-0.046,0,r,1,30,1,0];% p.CoilID=4

coil_parameters(5,:) = [pi/4,1,0,-0.0383,-0.0383,0,r,1,30,1,0];% p.CoilID=5
coil_parameters(6,:) = [-pi/4,1,0,-0.0383,0.0383,0,r,1,30,1,0];% p.CoilID=6
coil_parameters(7,:) = [pi/4,1,0,0.0383,0.0383,0,r,1,30,1,0];% p.CoilID=7
coil_parameters(8,:) = [-pi/4,1,0,0.0383,-0.0383,0,r,1,30,1,0];% p.CoilID=8

for id = 1:8
% coil_traj: (3,xx) matrix, the x-, y-, z- coordinates of the trajectory of
% the coil
[B1xt, B1yt, B1zt,coil_traj]=CoilCircle(coil_parameters(id,:),X,Y);
B1x(id,:)=B1xt;
B1y(id,:)=B1yt;
B1z(id,:)=B1zt;
Pos(id,:)=coil_parameters(4:6);
CoilTraj(:,:,id) = coil_traj;
end
end



%% field generated by a single coil, the coils applicable are preferably circular loop coils
function [B1x,B1y,B1z,coil_traj]=CoilCircle(p,X,Y)
% input:
% X, Y, observation points in mm
% output:
% coil_traj: (3,xx) matrix, the x-, y-, z- coordinates of the trajectory of
% the coil in meter

% Initialize parameters
% CoilID=p.CoilID;
% PosX=p.PosX;
% PosY=p.PosY;
% PosZ=p.PosZ;
% Azimuth=p.Azimuth;
% Elevation=p.Elevation;
% Radius=p.Radius;
% Segment=p.Segment;
% Scale=p.Scale;
% CurrentDir=p.CurrentDir;
% I0=p.I0;
% phi0=p.phi0;


Azimuth=p(1);
Elevation=p(3);
CurrentDir=p(2);

PosX=p(4);
PosY=p(5);
PosZ=p(6);
Radius=p(7);
Scale=p(8);

Segment=p(9);
I0=p(10);
phi0=p(11);

% Divide segment
if CurrentDir==1 % clock-wise
    theta=linspace(0,2*pi,Segment+1);
elseif CurrentDir==-1 % counterclock-wise
    theta=linspace(0,-2*pi,Segment+1);
end

N=[cos(Elevation)*cos(Azimuth) cos(Elevation)*sin(Azimuth) sin(Elevation)];
N=N/norm(N);
v=null(N);
ang=atan2(dot(cross(v(:,1),v(:,2)),N),dot(cross(v(:,1),N),cross(v(:,2),N))); % determine angle direction
v(:,1)=(ang/abs(ang))*v(:,1); % match angle direction
% generate (x,y,z) of the coil with a given coordinate of the center
points=repmat([PosX PosY PosZ]',1,size(theta,2))+Radius*(v(:,1)*cos(theta)+v(:,2)*sin(theta));

coil_traj = points;

% Save loops
%VCco.loops(:,:,CoilID)=points;


% Calculate B1 field
% X, Y, observation points in mm
% points in meter
% I0: input current magnitude
% phi0: input current initial phase, in radian
[B1x,B1y,B1z]=CoilBiotSavart(points,X,Y,I0,phi0);

% Compute scaled vectors of magnetic field direction
B1x = B1x*Scale;
B1y = B1y*Scale;
B1z = B1z*Scale;
   
end


%%                                                _______
% _________________________________________     / _____ \      
%     .  .     |---- (OO)|       ___   |       | |     | |     
%    /\  /\    |__ |  || |      /   \  |___    |_|     |_|     
%   /  \/  \   |  \   || |      \___/  |   \   |S|     |N|     
%  /   ||   \  |   \_ || |____|     \  |___/  MRI Simulator    
% _________________________________________                  
% Numerical MRI Simulation Package
% Version 1.2  - https://sourceforge.net/projects/mrilab/
%
% The MRiLab is a numerical MRI simulation package. It has been developed to 
% simulate factors that affect MR signal formation, acquisition and image 
% reconstruction. The simulation package features highly interactive graphic 
% user interface for various simulation purposes. MRiLab provides several 
% toolboxes for MR researchers to analyze RF pulse, design MR sequence, 
% configure multiple transmitting and receiving coils, investigate B0 
% in-homogeneity and object motion sensitivity et.al. The main simulation 
% platform combined with these toolboxes can be applied for customizing 
% various virtual MR experiments which can serve as a prior stage for 
% prototyping and testing new MR technique and application.
%
% Author:
%   Fang Liu <leoliuf@gmail.com>
%   University of Wisconsin-Madison
%   April-6-2014
% _________________________________________________________________________
% Copyright (c) 2011-2014, Fang Liu <leoliuf@gmail.com>
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without 
% modification, are permitted provided that the following conditions are 
% met:
% 
%     * Redistributions of source code must retain the above copyright 
%       notice, this list of conditions and the following disclaimer.
%     * Redistributions in binary form must reproduce the above copyright 
%       notice, this list of conditions and the following disclaimer in 
%       the documentation and/or other materials provided with the distribution
%       
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
% POSSIBILITY OF SUCH DAMAGE.
% _________________________________________________________________________

function [B1x,B1y,B1z]=CoilBiotSavart(points,X,Y,I0,phi0)
% inputs:
% X, Y, observation points in mm
% points in meter
% I0: input current magnitude
% phi0: input current initial phase, in radian
%create B1 field produced by Biot-Savart rule

% global VMco

x=points(1,:);
y=points(2,:);
z=points(3,:);


N_x=length(X(1,:));
N_y=length(Y(:,1));

% X, Y, observation points in mm
% scale them to m
P_C_x=X./1e3;
P_C_y=Y./1e3;
P_C_z=zeros(N_y,N_x);
% Initialize display grid
xgrid=reshape(P_C_x,1,N_x*N_y);
ygrid=reshape(P_C_y,1,N_x*N_y);
zgrid=reshape(P_C_z,1,N_x*N_y);


% Initialize constant
mu0 = 4*pi*1e-7;       % Permeability of free space (T*m/A)
I_current = I0*(cos(phi0)+1i*sin(phi0));       % Current in the loop (A)
Constant = mu0/(4*pi) * I_current;   % Useful constant

% Initialize B to zero
B1x = zeros(size(xgrid));
B1y = zeros(size(xgrid));
B1z = zeros(size(xgrid));

for i=1:length(x)-1
    
    % Compute components of segment vector dl
    dlx = x(i+1)-x(i);
    dly = y(i+1)-y(i);
    dlz = z(i+1)-z(i);
    
    % Compute the location of the midpoint of a segment
    xc = (x(i+1)+x(i))/2;
    yc = (y(i+1)+y(i))/2;
    zc = (z(i+1)+z(i))/2;
    
    %% segment on loop and observation point)
    rx = xgrid - xc;
    ry = ygrid - yc;
    rz = zgrid - zc;
    
    % Compute r^3 from r vector
    r3 = sqrt(rx.^2 + ry.^2 + rz.^2).^3;
    
    % Compute cross product dl X r
    dlXr_x = dly.*rz - dlz.*ry;
    dlXr_y = dlz.*rx - dlx.*rz;
    dlXr_z = dlx.*ry - dly.*rx;
    
    % Increment sum of magnetic field
    B1x = B1x + Constant.*dlXr_x./r3;
    B1y = B1y + Constant.*dlXr_y./r3;
    B1z = B1z + Constant.*dlXr_z./r3;
    
    
end

end