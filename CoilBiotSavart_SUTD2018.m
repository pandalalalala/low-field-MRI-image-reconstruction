function [B1x,B1y,B1z,coil_traj]=CoilBiotSavart_SUTD2018(X,Y,Pc,Azi,Elev,r,Segment,CurrentDir,I0,phi0)
% shaoying @June2018
% This function creates B1 field produced by Biot-Savart law

% Inputs:
% X, Y, observation points in mm
% Pc[PosX PosY PosZ], PosX=p.PosX; % X position of the center of the coil, in meter
% Azi, Azimuth angle;
% Elev, Elevation angle;
% r, radiu of coil in meter
% Segment, segment of a coil
% CurrentDir, % Currentdir, 1: clockwise; -1: counter clockwise
% I0: input current magnitude
% phi0: input current initial phase, in radian

% Outputs:
% B1x,B1y,B1z: magnetic fields generated by the loop
% coil_traj:(3,:) matrix, the x-, y-, z-coordinates of the source points (on the loop), in meter

% Divide segment
if CurrentDir==1 % clock-wise
    theta=linspace(0,2*pi,Segment+1);
elseif CurrentDir==-1 % counterclock-wise
    theta=linspace(0,-2*pi,Segment+1);
end

N=[cos(Elev)*cos(Azi) cos(Elev)*sin(Azi) sin(Elev)];
N=N/norm(N);
v=null(N);
ang=atan2(dot(cross(v(:,1),v(:,2)),N),dot(cross(v(:,1),N),cross(v(:,2),N))); % determine angle direction
v(:,1)=(ang/abs(ang))*v(:,1); % match angle direction
% generate (x,y,z) of the coil with a given coordinate of the center
PosX = Pc(1,1); PosY=Pc(1,2); PosZ = Pc(1,3);
points=repmat([PosX PosY PosZ]',1,size(theta,2))+r*(v(:,1)*cos(theta)+v(:,2)*sin(theta));
% coil_traj: (3,:) matrix, the x-, y-, z- coordinates of the trajectory of the coil in meter
coil_traj = points;

%%
x=points(1,:);
y=points(2,:);
z=points(3,:);

N_x=length(X(1,:));
N_y=length(Y(:,1));

% X, Y, observation points in mm
% scale them to m
P_C_x=X./1e3;
P_C_y=Y./1e3;
P_C_z=zeros(N_y,N_x);
% Initialize display grid
xgrid=reshape(P_C_x,1,N_x*N_y);
ygrid=reshape(P_C_y,1,N_x*N_y);
zgrid=reshape(P_C_z,1,N_x*N_y);

% Initialize constant
mu0 = 4*pi*1e-7;       % Permeability of free space (T*m/A)
I_current = I0*(cos(phi0)+1i*sin(phi0));       % Current in the loop (A)
Constant = mu0/(4*pi) * I_current;   % Useful constant

% Initialize B to zero
B1x = zeros(size(xgrid));
B1y = zeros(size(xgrid));
B1z = zeros(size(xgrid));

for i=1:length(x)-1
    % Compute components of segment vector dl
    dlx = x(i+1)-x(i);
    dly = y(i+1)-y(i);
    dlz = z(i+1)-z(i);
    
    % Compute the location of the midpoint of a segment
    xc = (x(i+1)+x(i))/2;
    yc = (y(i+1)+y(i))/2;
    zc = (z(i+1)+z(i))/2;
    
    %% segment on loop and observation point)
    rx = xgrid - xc;
    ry = ygrid - yc;
    rz = zgrid - zc;
    
    % Compute r^3 from r vector
    r3 = sqrt(rx.^2 + ry.^2 + rz.^2).^3;
    
    % Compute cross product dl X r
    dlXr_x = dly.*rz - dlz.*ry;
    dlXr_y = dlz.*rx - dlx.*rz;
    dlXr_z = dlx.*ry - dly.*rx;
    
    % Increment sum of magnetic field
    B1x = B1x + Constant.*dlXr_x./r3;
    B1y = B1y + Constant.*dlXr_y./r3;
    B1z = B1z + Constant.*dlXr_z./r3;
end
